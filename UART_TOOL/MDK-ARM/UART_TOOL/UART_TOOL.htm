<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [UART_TOOL\UART_TOOL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image UART_TOOL\UART_TOOL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Nov 05 10:52:47 2018
<BR><P>
<H3>Maximum Stack Usage =       4824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
protocol_cb &rArr; pro_file_ack &rArr; protocol_send &rArr; b_tp_send_data &rArr; _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[11c]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11c]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[6a]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[68]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[69]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[6c]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[98]">access_virt_barray</a> from jmemmgr.o(i.access_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[97]">access_virt_sarray</a> from jmemmgr.o(i.access_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[93]">alloc_barray</a> from jmemmgr.o(i.alloc_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[91]">alloc_large</a> from jmemmgr.o(i.alloc_large) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[92]">alloc_sarray</a> from jmemmgr.o(i.alloc_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[90]">alloc_small</a> from jmemmgr.o(i.alloc_small) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[7e]">cmyk_ycck_convert</a> from jccolor.o(i.cmyk_ycck_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[a9]">compress_data</a> from jccoefct.o(i.compress_data) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[aa]">compress_first_pass</a> from jccoefct.o(i.compress_first_pass) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[ab]">compress_output</a> from jccoefct.o(i.compress_output) referenced from jccoefct.o(i.start_pass_coef)
 <LI><a href="#[9f]">emit_message</a> from jerror.o(i.emit_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[9c]">empty_mem_output_buffer</a> from jdatadst.o(i.empty_mem_output_buffer) referenced from jdatadst.o(i.jpeg_mem_dest)
 <LI><a href="#[a8]">encode_mcu</a> from jcarith.o(i.encode_mcu) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[a5]">encode_mcu_AC_first</a> from jcarith.o(i.encode_mcu_AC_first) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[d3]">encode_mcu_AC_first</a> from jchuff.o(i.encode_mcu_AC_first) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[a4]">encode_mcu_AC_refine</a> from jcarith.o(i.encode_mcu_AC_refine) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[d2]">encode_mcu_AC_refine</a> from jchuff.o(i.encode_mcu_AC_refine) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[a6]">encode_mcu_DC_first</a> from jcarith.o(i.encode_mcu_DC_first) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[d4]">encode_mcu_DC_first</a> from jchuff.o(i.encode_mcu_DC_first) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[a7]">encode_mcu_DC_refine</a> from jcarith.o(i.encode_mcu_DC_refine) referenced from jcarith.o(i.start_pass)
 <LI><a href="#[d5]">encode_mcu_DC_refine</a> from jchuff.o(i.encode_mcu_DC_refine) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[d6]">encode_mcu_gather</a> from jchuff.o(i.encode_mcu_gather) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[d7]">encode_mcu_huff</a> from jchuff.o(i.encode_mcu_huff) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[9e]">error_exit</a> from jerror.o(i.error_exit) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[6e]">finish_pass</a> from jcarith.o(i.finish_pass) referenced from jcarith.o(i.jinit_arith_encoder)
 <LI><a href="#[d0]">finish_pass_gather</a> from jchuff.o(i.finish_pass_gather) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[d1]">finish_pass_huff</a> from jchuff.o(i.finish_pass_huff) referenced from jchuff.o(i.start_pass_huff)
 <LI><a href="#[73]">finish_pass_master</a> from jcmaster.o(i.finish_pass_master) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[a1]">format_message</a> from jerror.o(i.format_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[ce]">forward_DCT</a> from jcdctmgr.o(i.forward_DCT) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[cf]">forward_DCT_float</a> from jcdctmgr.o(i.forward_DCT_float) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[6b]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[99]">free_pool</a> from jmemmgr.o(i.free_pool) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[82]">fullsize_downsample</a> from jcsample.o(i.fullsize_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[81]">fullsize_smooth_downsample</a> from jcsample.o(i.fullsize_smooth_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[7a]">grayscale_convert</a> from jccolor.o(i.grayscale_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[83]">h2v1_downsample</a> from jcsample.o(i.h2v1_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[85]">h2v2_downsample</a> from jcsample.o(i.h2v2_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[84]">h2v2_smooth_downsample</a> from jcsample.o(i.h2v2_smooth_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[9b]">init_mem_destination</a> from jdatadst.o(i.init_mem_destination) referenced from jdatadst.o(i.jpeg_mem_dest)
 <LI><a href="#[86]">int_downsample</a> from jcsample.o(i.int_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[b4]">jpeg_fdct_10x10</a> from jfdctint.o(i.jpeg_fdct_10x10) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[be]">jpeg_fdct_10x5</a> from jfdctint.o(i.jpeg_fdct_10x5) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b5]">jpeg_fdct_11x11</a> from jfdctint.o(i.jpeg_fdct_11x11) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b6]">jpeg_fdct_12x12</a> from jfdctint.o(i.jpeg_fdct_12x12) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[bd]">jpeg_fdct_12x6</a> from jfdctint.o(i.jpeg_fdct_12x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b7]">jpeg_fdct_13x13</a> from jfdctint.o(i.jpeg_fdct_13x13) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b8]">jpeg_fdct_14x14</a> from jfdctint.o(i.jpeg_fdct_14x14) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[bc]">jpeg_fdct_14x7</a> from jfdctint.o(i.jpeg_fdct_14x7) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b9]">jpeg_fdct_15x15</a> from jfdctint.o(i.jpeg_fdct_15x15) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[ba]">jpeg_fdct_16x16</a> from jfdctint.o(i.jpeg_fdct_16x16) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[bb]">jpeg_fdct_16x8</a> from jfdctint.o(i.jpeg_fdct_16x8) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[ac]">jpeg_fdct_1x1</a> from jfdctint.o(i.jpeg_fdct_1x1) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[ca]">jpeg_fdct_1x2</a> from jfdctint.o(i.jpeg_fdct_1x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c2]">jpeg_fdct_2x1</a> from jfdctint.o(i.jpeg_fdct_2x1) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[ad]">jpeg_fdct_2x2</a> from jfdctint.o(i.jpeg_fdct_2x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c9]">jpeg_fdct_2x4</a> from jfdctint.o(i.jpeg_fdct_2x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[ae]">jpeg_fdct_3x3</a> from jfdctint.o(i.jpeg_fdct_3x3) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c8]">jpeg_fdct_3x6</a> from jfdctint.o(i.jpeg_fdct_3x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c1]">jpeg_fdct_4x2</a> from jfdctint.o(i.jpeg_fdct_4x2) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[af]">jpeg_fdct_4x4</a> from jfdctint.o(i.jpeg_fdct_4x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c7]">jpeg_fdct_4x8</a> from jfdctint.o(i.jpeg_fdct_4x8) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c6]">jpeg_fdct_5x10</a> from jfdctint.o(i.jpeg_fdct_5x10) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b0]">jpeg_fdct_5x5</a> from jfdctint.o(i.jpeg_fdct_5x5) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c5]">jpeg_fdct_6x12</a> from jfdctint.o(i.jpeg_fdct_6x12) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c0]">jpeg_fdct_6x3</a> from jfdctint.o(i.jpeg_fdct_6x3) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b1]">jpeg_fdct_6x6</a> from jfdctint.o(i.jpeg_fdct_6x6) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c4]">jpeg_fdct_7x14</a> from jfdctint.o(i.jpeg_fdct_7x14) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b2]">jpeg_fdct_7x7</a> from jfdctint.o(i.jpeg_fdct_7x7) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[c3]">jpeg_fdct_8x16</a> from jfdctint.o(i.jpeg_fdct_8x16) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[bf]">jpeg_fdct_8x4</a> from jfdctint.o(i.jpeg_fdct_8x4) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[b3]">jpeg_fdct_9x9</a> from jfdctint.o(i.jpeg_fdct_9x9) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[cd]">jpeg_fdct_float</a> from jfdctflt.o(i.jpeg_fdct_float) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[cc]">jpeg_fdct_ifast</a> from jfdctfst.o(i.jpeg_fdct_ifast) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[cb]">jpeg_fdct_islow</a> from jfdctint.o(i.jpeg_fdct_islow) referenced from jcdctmgr.o(i.start_pass_fdctmgr)
 <LI><a href="#[64]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[79]">null_convert</a> from jccolor.o(i.null_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[77]">null_method</a> from jccolor.o(i.null_method) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[a0]">output_message</a> from jerror.o(i.output_message) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[72]">pass_startup</a> from jcmaster.o(i.pass_startup) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[75]">pre_process_context</a> from jcprepct.o(i.pre_process_context) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[76]">pre_process_data</a> from jcprepct.o(i.pre_process_data) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[71]">prepare_for_pass</a> from jcmaster.o(i.prepare_for_pass) referenced from jcmaster.o(i.jinit_c_master_control)
 <LI><a href="#[d8]">process_data_simple_main</a> from jcmainct.o(i.process_data_simple_main) referenced from jcmainct.o(i.start_pass_main)
 <LI><a href="#[a3]">protocol_cb</a> from protocol.o(i.protocol_cb) referenced from protocol.o(i.protocol_init)
 <LI><a href="#[96]">realize_virt_arrays</a> from jmemmgr.o(i.realize_virt_arrays) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[95]">request_virt_barray</a> from jmemmgr.o(i.request_virt_barray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[94]">request_virt_sarray</a> from jmemmgr.o(i.request_virt_sarray) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[a2]">reset_error_mgr</a> from jerror.o(i.reset_error_mgr) referenced from jerror.o(i.jpeg_std_error)
 <LI><a href="#[7c]">rgb_convert</a> from jccolor.o(i.rgb_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[7b]">rgb_gray_convert</a> from jccolor.o(i.rgb_gray_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[7d]">rgb_ycc_convert</a> from jccolor.o(i.rgb_ycc_convert) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[78]">rgb_ycc_start</a> from jccolor.o(i.rgb_ycc_start) referenced from jccolor.o(i.jinit_color_converter)
 <LI><a href="#[9a]">self_destruct</a> from jmemmgr.o(i.self_destruct) referenced from jmemmgr.o(i.jinit_memory_mgr)
 <LI><a href="#[80]">sep_downsample</a> from jcsample.o(i.sep_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[6d]">start_pass</a> from jcarith.o(i.start_pass) referenced from jcarith.o(i.jinit_arith_encoder)
 <LI><a href="#[6f]">start_pass_coef</a> from jccoefct.o(i.start_pass_coef) referenced from jccoefct.o(i.jinit_c_coef_controller)
 <LI><a href="#[7f]">start_pass_downsample</a> from jcsample.o(i.start_pass_downsample) referenced from jcsample.o(i.jinit_downsampler)
 <LI><a href="#[87]">start_pass_fdctmgr</a> from jcdctmgr.o(i.start_pass_fdctmgr) referenced from jcdctmgr.o(i.jinit_forward_dct)
 <LI><a href="#[88]">start_pass_huff</a> from jchuff.o(i.start_pass_huff) referenced from jchuff.o(i.jinit_huff_encoder)
 <LI><a href="#[70]">start_pass_main</a> from jcmainct.o(i.start_pass_main) referenced from jcmainct.o(i.jinit_c_main_controller)
 <LI><a href="#[74]">start_pass_prep</a> from jcprepct.o(i.start_pass_prep) referenced from jcprepct.o(i.jinit_c_prep_controller)
 <LI><a href="#[9d]">term_mem_destination</a> from jdatadst.o(i.term_mem_destination) referenced from jdatadst.o(i.jpeg_mem_dest)
 <LI><a href="#[89]">write_file_header</a> from jcmarker.o(i.write_file_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8c]">write_file_trailer</a> from jcmarker.o(i.write_file_trailer) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8a]">write_frame_header</a> from jcmarker.o(i.write_frame_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8f]">write_marker_byte</a> from jcmarker.o(i.write_marker_byte) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8e]">write_marker_header</a> from jcmarker.o(i.write_marker_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8b]">write_scan_header</a> from jcmarker.o(i.write_scan_header) referenced from jcmarker.o(i.jinit_marker_writer)
 <LI><a href="#[8d]">write_tables_only</a> from jcmarker.o(i.write_tables_only) referenced from jcmarker.o(i.jinit_marker_writer)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ae]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1af]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1b1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1b2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_send_data
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_unpack_send
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_mem_output_buffer
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_context_buffer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_first_pass
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_8x4
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_7x7
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_7x14
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x6
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_6x12
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_5x5
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_5x10
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x8
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x4
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_4x2
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_3x6
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_3x3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_2x1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_1x2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_1x1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_14x7
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_12x6
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_fdct_10x5
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_c_derived_tbl
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_fdctmgr
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1ba]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e2]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[da]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[105]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[ea]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[103]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32f4xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[115]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_write_end
</UL>

<P><STRONG><a name="[f4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_buf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_write_end
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_xsector
</UL>

<P><STRONG><a name="[eb]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[126]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_MspInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f6]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[100]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[106]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[107]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_SPI_Receive</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_read
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_write
</UL>

<P><STRONG><a name="[10a]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
</UL>

<P><STRONG><a name="[129]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10e]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[110]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_idle_cb
</UL>

<P><STRONG><a name="[116]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[113]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_idle_cb
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_start
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[12b]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[11f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_buf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>MX_LIBJPEG_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, libjpeg.o(i.MX_LIBJPEG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART1_IRQHandler &rArr; uart1_idle_cb &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_idle_cb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[12f]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bc]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[1a3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bd]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[17e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_message
</UL>

<P><STRONG><a name="[1be]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1bf]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[144]"></a>_b_tp_rec_check_head</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, b_tp.o(i._b_tp_rec_check_head))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_receive_data
</UL>

<P><STRONG><a name="[148]"></a>_b_tp_send_set_head</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, b_tp.o(i._b_tp_send_set_head))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_send_data
</UL>

<P><STRONG><a name="[136]"></a>b_tp_port_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, b_tp_port.o(i.b_tp_port_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_unpack_send
</UL>

<P><STRONG><a name="[143]"></a>b_tp_receive_data</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, b_tp.o(i.b_tp_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = b_tp_receive_data &rArr; _b_tp_check_data &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_rec_check_head
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_reset_rec_info
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_check_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_idle_cb
</UL>

<P><STRONG><a name="[146]"></a>b_tp_reg_callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, b_tp.o(i.b_tp_reg_callback))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_reset_rec_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
</UL>

<P><STRONG><a name="[147]"></a>b_tp_send_data</STRONG> (Thumb, 96 bytes, Stack size 272 bytes, b_tp.o(i.b_tp_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4544<LI>Call Chain = b_tp_send_data &rArr; _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_send_set_head
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_unpack_send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send
</UL>

<P><STRONG><a name="[149]"></a>c_jpeg_grayscale</STRONG> (Thumb, 128 bytes, Stack size 608 bytes, c_jpeg.o(i.c_jpeg_grayscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = c_jpeg_grayscale &rArr; jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_write_scanlines
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_compress
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_compress
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_dest
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_std_error
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>crc16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, crc16.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_send_data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_b_tp_check_data
</UL>

<P><STRONG><a name="[173]"></a>f_spi_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_drv.o(i.f_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = f_spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_buf
</UL>

<P><STRONG><a name="[174]"></a>f_spi_rw_byte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, flash_drv.o(i.f_spi_rw_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_buf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_write_end
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_xsector
</UL>

<P><STRONG><a name="[175]"></a>f_spi_write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_drv.o(i.f_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = f_spi_write &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>

<P><STRONG><a name="[177]"></a>flash_erase_xsector</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, flash_drv.o(i.flash_erase_xsector))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_erase_xsector &rArr; flash_wait_write_end &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cb
</UL>

<P><STRONG><a name="[17a]"></a>flash_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flash_drv.o(i.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_init &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>flash_read_buf</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, flash_drv.o(i.flash_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_read_buf &rArr; f_spi_read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>flash_write_buf</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, flash_drv.o(i.flash_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = flash_write_buf &rArr; flash_write_page &rArr; flash_wait_write_end &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cb
</UL>

<P><STRONG><a name="[6b]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[16d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_mem_output_buffer
</UL>

<P><STRONG><a name="[172]"></a>jcopy_sample_rows</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, jutils.o(i.jcopy_sample_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_downsample
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_context
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
</UL>

<P><STRONG><a name="[184]"></a>jdiv_round_up</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jutils.o(i.jdiv_round_up))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_jpeg_dimensions
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>

<P><STRONG><a name="[18e]"></a>jinit_arith_encoder</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, jcarith.o(i.jinit_arith_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_arith_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[185]"></a>jinit_c_coef_controller</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, jccoefct.o(i.jinit_c_coef_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_c_coef_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jround_up
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[190]"></a>jinit_c_main_controller</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, jcmainct.o(i.jinit_c_main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_c_main_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[187]"></a>jinit_c_master_control</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, jcmaster.o(i.jinit_c_master_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720<LI>Call Chain = jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_script
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[189]"></a>jinit_c_prep_controller</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, jcprepct.o(i.jinit_c_prep_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jinit_c_prep_controller &rArr; create_context_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_context_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[18b]"></a>jinit_color_converter</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, jccolor.o(i.jinit_color_converter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jinit_color_converter
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[18a]"></a>jinit_compress_master</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, jcinit.o(i.jinit_compress_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 2728<LI>Call Chain = jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_marker_writer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_forward_dct
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_downsampler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_color_converter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_prep_controller
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_main_controller
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_coef_controller
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_huff_encoder
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_arith_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
</UL>

<P><STRONG><a name="[18c]"></a>jinit_downsampler</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, jcsample.o(i.jinit_downsampler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jinit_downsampler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[18d]"></a>jinit_forward_dct</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, jcdctmgr.o(i.jinit_forward_dct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_forward_dct
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[18f]"></a>jinit_huff_encoder</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, jchuff.o(i.jinit_huff_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_huff_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[191]"></a>jinit_marker_writer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, jcmarker.o(i.jinit_marker_writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jinit_marker_writer
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
</UL>

<P><STRONG><a name="[192]"></a>jinit_memory_mgr</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, jmemmgr.o(i.jinit_memory_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = jinit_memory_mgr &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_CreateCompress
</UL>

<P><STRONG><a name="[14b]"></a>jpeg_CreateCompress</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, jcapimin.o(i.jpeg_CreateCompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = jpeg_CreateCompress &rArr; jinit_memory_mgr &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[19a]"></a>jpeg_abort</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_finish_compress
</UL>

<P><STRONG><a name="[196]"></a>jpeg_add_quant_table</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, jcparam.o(i.jpeg_add_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_linear_quality
</UL>

<P><STRONG><a name="[13c]"></a>jpeg_alloc_huff_table</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
</UL>

<P><STRONG><a name="[197]"></a>jpeg_alloc_quant_table</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_alloc_quant_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_alloc_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_add_quant_table
</UL>

<P><STRONG><a name="[183]"></a>jpeg_calc_jpeg_dimensions</STRONG> (Thumb, 668 bytes, Stack size 24 bytes, jcmaster.o(i.jpeg_calc_jpeg_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_calc_jpeg_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_setup
</UL>

<P><STRONG><a name="[198]"></a>jpeg_default_colorspace</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, jcparam.o(i.jpeg_default_colorspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_default_colorspace &rArr; jpeg_set_colorspace
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_colorspace
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
</UL>

<P><STRONG><a name="[170]"></a>jpeg_destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcomapi.o(i.jpeg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy_compress
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_exit
</UL>

<P><STRONG><a name="[152]"></a>jpeg_destroy_compress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jcapimin.o(i.jpeg_destroy_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_destroy_compress &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[b4]"></a>jpeg_fdct_10x10</STRONG> (Thumb, 854 bytes, Stack size 200 bytes, jfdctint.o(i.jpeg_fdct_10x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = jpeg_fdct_10x10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[be]"></a>jpeg_fdct_10x5</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, jfdctint.o(i.jpeg_fdct_10x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = jpeg_fdct_10x5
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b5]"></a>jpeg_fdct_11x11</STRONG> (Thumb, 1216 bytes, Stack size 220 bytes, jfdctint.o(i.jpeg_fdct_11x11))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = jpeg_fdct_11x11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b6]"></a>jpeg_fdct_12x12</STRONG> (Thumb, 1092 bytes, Stack size 284 bytes, jfdctint.o(i.jpeg_fdct_12x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = jpeg_fdct_12x12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[bd]"></a>jpeg_fdct_12x6</STRONG> (Thumb, 752 bytes, Stack size 152 bytes, jfdctint.o(i.jpeg_fdct_12x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = jpeg_fdct_12x6
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b7]"></a>jpeg_fdct_13x13</STRONG> (Thumb, 1458 bytes, Stack size 296 bytes, jfdctint.o(i.jpeg_fdct_13x13))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = jpeg_fdct_13x13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b8]"></a>jpeg_fdct_14x14</STRONG> (Thumb, 1192 bytes, Stack size 360 bytes, jfdctint.o(i.jpeg_fdct_14x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jpeg_fdct_14x14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[bc]"></a>jpeg_fdct_14x7</STRONG> (Thumb, 928 bytes, Stack size 168 bytes, jfdctint.o(i.jpeg_fdct_14x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = jpeg_fdct_14x7
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b9]"></a>jpeg_fdct_15x15</STRONG> (Thumb, 1262 bytes, Stack size 372 bytes, jfdctint.o(i.jpeg_fdct_15x15))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = jpeg_fdct_15x15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[ba]"></a>jpeg_fdct_16x16</STRONG> (Thumb, 1498 bytes, Stack size 444 bytes, jfdctint.o(i.jpeg_fdct_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = jpeg_fdct_16x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[bb]"></a>jpeg_fdct_16x8</STRONG> (Thumb, 1092 bytes, Stack size 184 bytes, jfdctint.o(i.jpeg_fdct_16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = jpeg_fdct_16x8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[ac]"></a>jpeg_fdct_1x1</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, jfdctint.o(i.jpeg_fdct_1x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_fdct_1x1
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[ca]"></a>jpeg_fdct_1x2</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jfdctint.o(i.jpeg_fdct_1x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_fdct_1x2
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c2]"></a>jpeg_fdct_2x1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jfdctint.o(i.jpeg_fdct_2x1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_fdct_2x1
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[ad]"></a>jpeg_fdct_2x2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jfdctint.o(i.jpeg_fdct_2x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_fdct_2x2
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c9]"></a>jpeg_fdct_2x4</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, jfdctint.o(i.jpeg_fdct_2x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_fdct_2x4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[ae]"></a>jpeg_fdct_3x3</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, jfdctint.o(i.jpeg_fdct_3x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_fdct_3x3
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c8]"></a>jpeg_fdct_3x6</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, jfdctint.o(i.jpeg_fdct_3x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_fdct_3x6
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c1]"></a>jpeg_fdct_4x2</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, jfdctint.o(i.jpeg_fdct_4x2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_fdct_4x2
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[af]"></a>jpeg_fdct_4x4</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, jfdctint.o(i.jpeg_fdct_4x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_fdct_4x4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c7]"></a>jpeg_fdct_4x8</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_4x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_4x8
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c6]"></a>jpeg_fdct_5x10</STRONG> (Thumb, 604 bytes, Stack size 192 bytes, jfdctint.o(i.jpeg_fdct_5x10))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = jpeg_fdct_5x10
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b0]"></a>jpeg_fdct_5x5</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, jfdctint.o(i.jpeg_fdct_5x5))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jpeg_fdct_5x5
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c5]"></a>jpeg_fdct_6x12</STRONG> (Thumb, 762 bytes, Stack size 288 bytes, jfdctint.o(i.jpeg_fdct_6x12))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = jpeg_fdct_6x12
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c0]"></a>jpeg_fdct_6x3</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_6x3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_6x3
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b1]"></a>jpeg_fdct_6x6</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_6x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_6x6
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c4]"></a>jpeg_fdct_7x14</STRONG> (Thumb, 936 bytes, Stack size 360 bytes, jfdctint.o(i.jpeg_fdct_7x14))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = jpeg_fdct_7x14
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b2]"></a>jpeg_fdct_7x7</STRONG> (Thumb, 596 bytes, Stack size 48 bytes, jfdctint.o(i.jpeg_fdct_7x7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_7x7
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[c3]"></a>jpeg_fdct_8x16</STRONG> (Thumb, 1110 bytes, Stack size 444 bytes, jfdctint.o(i.jpeg_fdct_8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = jpeg_fdct_8x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[bf]"></a>jpeg_fdct_8x4</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, jfdctint.o(i.jpeg_fdct_8x4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_fdct_8x4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[b3]"></a>jpeg_fdct_9x9</STRONG> (Thumb, 712 bytes, Stack size 144 bytes, jfdctint.o(i.jpeg_fdct_9x9))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = jpeg_fdct_9x9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[cd]"></a>jpeg_fdct_float</STRONG> (Thumb, 496 bytes, Stack size 20 bytes, jfdctflt.o(i.jpeg_fdct_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_fdct_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[cc]"></a>jpeg_fdct_ifast</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, jfdctfst.o(i.jpeg_fdct_ifast))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_fdct_ifast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[cb]"></a>jpeg_fdct_islow</STRONG> (Thumb, 642 bytes, Stack size 60 bytes, jfdctint.o(i.jpeg_fdct_islow))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = jpeg_fdct_islow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[151]"></a>jpeg_finish_compress</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, jcapimin.o(i.jpeg_finish_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_finish_compress &rArr; jpeg_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[17f]"></a>jpeg_free_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_free_large &rArr; vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[180]"></a>jpeg_free_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_free_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpeg_free_small &rArr; vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>

<P><STRONG><a name="[13e]"></a>jpeg_get_large</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = jpeg_get_large &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[13f]"></a>jpeg_get_small</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_get_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>

<P><STRONG><a name="[1ab]"></a>jpeg_mem_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_available))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[14c]"></a>jpeg_mem_dest</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, jdatadst.o(i.jpeg_mem_dest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = jpeg_mem_dest &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[193]"></a>jpeg_mem_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
</UL>

<P><STRONG><a name="[194]"></a>jpeg_mem_term</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_mem_term))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_memory_mgr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>

<P><STRONG><a name="[1ac]"></a>jpeg_open_backing_store</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jmemnobs.o(i.jpeg_open_backing_store))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>

<P><STRONG><a name="[19f]"></a>jpeg_quality_scaling</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jcparam.o(i.jpeg_quality_scaling))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
</UL>

<P><STRONG><a name="[199]"></a>jpeg_set_colorspace</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, jcparam.o(i.jpeg_set_colorspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_set_colorspace
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_default_colorspace
</UL>

<P><STRONG><a name="[14d]"></a>jpeg_set_defaults</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, jcparam.o(i.jpeg_set_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jpeg_set_defaults &rArr; jpeg_set_quality &rArr; jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_default_colorspace
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_huff_table
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[19e]"></a>jpeg_set_linear_quality</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, jcparam.o(i.jpeg_set_linear_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_add_quant_table
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_quality
</UL>

<P><STRONG><a name="[14e]"></a>jpeg_set_quality</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jcparam.o(i.jpeg_set_quality))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpeg_set_quality &rArr; jpeg_set_linear_quality &rArr; jpeg_add_quant_table &rArr; jpeg_alloc_quant_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_linear_quality
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_quality_scaling
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
</UL>

<P><STRONG><a name="[14f]"></a>jpeg_start_compress</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jcapistd.o(i.jpeg_start_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 2744<LI>Call Chain = jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_compress_master
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_suppress_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[14a]"></a>jpeg_std_error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, jerror.o(i.jpeg_std_error))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[1a0]"></a>jpeg_suppress_tables</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, jcapimin.o(i.jpeg_suppress_tables))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpeg_suppress_tables
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_start_compress
</UL>

<P><STRONG><a name="[150]"></a>jpeg_write_scanlines</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, jcapistd.o(i.jpeg_write_scanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_write_scanlines
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
</UL>

<P><STRONG><a name="[186]"></a>jround_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jutils.o(i.jround_up))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_coef_controller
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = main &rArr; c_jpeg_grayscale &rArr; jpeg_start_compress &rArr; jinit_compress_master &rArr; jinit_c_master_control &rArr; validate_script
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_buf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rec_start
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_buf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_jpeg_grayscale
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LIBJPEG_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FMC_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_dest
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_mem_output_buffer
</UL>

<P><STRONG><a name="[1a7]"></a>pro_file_ack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, protocol.o(i.pro_file_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = pro_file_ack &rArr; protocol_send &rArr; b_tp_send_data &rArr; _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_cb
</UL>

<P><STRONG><a name="[a3]"></a>protocol_cb</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, protocol.o(i.protocol_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = protocol_cb &rArr; pro_file_ack &rArr; protocol_send &rArr; b_tp_send_data &rArr; _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_buf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_xsector
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_file_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol.o(i.protocol_init)
</UL>
<P><STRONG><a name="[1a2]"></a>protocol_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol.o(i.protocol_init))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_reg_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>protocol_send</STRONG> (Thumb, 42 bytes, Stack size 264 bytes, protocol.o(i.protocol_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = protocol_send &rArr; b_tp_send_data &rArr; _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_send_data
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_file_ack
</UL>

<P><STRONG><a name="[19c]"></a>pvPortMalloc</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
</UL>

<P><STRONG><a name="[12e]"></a>uart1_idle_cb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(i.uart1_idle_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart1_idle_cb &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_receive_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>uart_rec_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.uart_rec_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_rec_start &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>uart_send_buf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i.uart_send_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_port_send
</UL>

<P><STRONG><a name="[19b]"></a>vPortFree</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[121]"></a>MX_FMC_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, main.o(i.MX_FMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_FMC_Init &rArr; HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>MX_GPIO_Init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>MX_SPI5_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.MX_SPI5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI5_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, main.o(i.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[10d]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[10c]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[67]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[6a]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[68]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[69]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[112]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[111]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[114]"></a>UART_Receive_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[117]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[ef]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[ee]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[f1]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[fb]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[132]"></a>_b_tp_check_data</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, b_tp.o(i._b_tp_check_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _b_tp_check_data &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_receive_data
</UL>

<P><STRONG><a name="[145]"></a>_b_tp_reset_rec_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, b_tp.o(i._b_tp_reset_rec_info))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_reg_callback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_receive_data
</UL>

<P><STRONG><a name="[134]"></a>_b_tp_unpack_send</STRONG> (Thumb, 194 bytes, Stack size 4200 bytes, b_tp.o(i._b_tp_unpack_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 4272<LI>Call Chain = _b_tp_unpack_send &rArr; b_tp_port_send &rArr; uart_send_buf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_port_send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_tp_send_data
</UL>

<P><STRONG><a name="[1a9]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1aa]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[179]"></a>flash_wait_write_end</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_drv.o(i.flash_wait_write_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flash_wait_write_end &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_xsector
</UL>

<P><STRONG><a name="[178]"></a>flash_write_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash_drv.o(i.flash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_write_enable &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_page
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_xsector
</UL>

<P><STRONG><a name="[17d]"></a>flash_write_page</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, flash_drv.o(i.flash_write_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = flash_write_page &rArr; flash_wait_write_end &rArr; f_spi_rw_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_spi_rw_byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_wait_write_end
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_buf
</UL>

<P><STRONG><a name="[13b]"></a>add_huff_table</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, jcparam.o(i.add_huff_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_huff_table &rArr; jpeg_alloc_huff_table
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_set_defaults
</UL>

<P><STRONG><a name="[73]"></a>finish_pass_master</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, jcmaster.o(i.finish_pass_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finish_pass_master
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[182]"></a>initial_setup</STRONG> (Thumb, 670 bytes, Stack size 32 bytes, jcmaster.o(i.initial_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initial_setup &rArr; jpeg_calc_jpeg_dimensions
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_calc_jpeg_dimensions
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
</UL>

<P><STRONG><a name="[72]"></a>pass_startup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, jcmaster.o(i.pass_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pass_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[1a5]"></a>per_scan_setup</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, jcmaster.o(i.per_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdiv_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_pass
</UL>

<P><STRONG><a name="[71]"></a>prepare_for_pass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, jcmaster.o(i.prepare_for_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prepare_for_pass &rArr; per_scan_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_scan_parameters
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;per_scan_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmaster.o(i.jinit_c_master_control)
</UL>
<P><STRONG><a name="[1a6]"></a>select_scan_parameters</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, jcmaster.o(i.select_scan_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_scan_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_pass
</UL>

<P><STRONG><a name="[188]"></a>validate_script</STRONG> (Thumb, 708 bytes, Stack size 2680 bytes, jcmaster.o(i.validate_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680<LI>Call Chain = validate_script
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_master_control
</UL>

<P><STRONG><a name="[d8]"></a>process_data_simple_main</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, jcmainct.o(i.process_data_simple_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = process_data_simple_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmainct.o(i.start_pass_main)
</UL>
<P><STRONG><a name="[70]"></a>start_pass_main</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jcmainct.o(i.start_pass_main))
<BR>[Address Reference Count : 1]<UL><LI> jcmainct.o(i.jinit_c_main_controller)
</UL>
<P><STRONG><a name="[154]"></a>create_context_buffer</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, jcprepct.o(i.create_context_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_context_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jinit_c_prep_controller
</UL>

<P><STRONG><a name="[171]"></a>expand_bottom_edge</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, jcprepct.o(i.expand_bottom_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_process_context
</UL>

<P><STRONG><a name="[75]"></a>pre_process_context</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, jcprepct.o(i.pre_process_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pre_process_context &rArr; expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[76]"></a>pre_process_data</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, jcprepct.o(i.pre_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pre_process_data &rArr; expand_bottom_edge &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_bottom_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[74]"></a>start_pass_prep</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jcprepct.o(i.start_pass_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_prep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcprepct.o(i.jinit_c_prep_controller)
</UL>
<P><STRONG><a name="[a9]"></a>compress_data</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, jccoefct.o(i.compress_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = compress_data
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[aa]"></a>compress_first_pass</STRONG> (Thumb, 354 bytes, Stack size 112 bytes, jccoefct.o(i.compress_first_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = compress_first_pass &rArr; compress_output
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_output
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[ab]"></a>compress_output</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, jccoefct.o(i.compress_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compress_output
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_first_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.start_pass_coef)
</UL>
<P><STRONG><a name="[153]"></a>start_iMCU_row</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, jccoefct.o(i.start_iMCU_row))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_coef
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_output
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_data
</UL>

<P><STRONG><a name="[6f]"></a>start_pass_coef</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, jccoefct.o(i.start_pass_coef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = start_pass_coef
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_iMCU_row
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccoefct.o(i.jinit_c_coef_controller)
</UL>
<P><STRONG><a name="[7e]"></a>cmyk_ycck_convert</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, jccolor.o(i.cmyk_ycck_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmyk_ycck_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[7a]"></a>grayscale_convert</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, jccolor.o(i.grayscale_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = grayscale_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[79]"></a>null_convert</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, jccolor.o(i.null_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = null_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[77]"></a>null_method</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jccolor.o(i.null_method))
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[7c]"></a>rgb_convert</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, jccolor.o(i.rgb_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rgb_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[7b]"></a>rgb_gray_convert</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jccolor.o(i.rgb_gray_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rgb_gray_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[7d]"></a>rgb_ycc_convert</STRONG> (Thumb, 182 bytes, Stack size 52 bytes, jccolor.o(i.rgb_ycc_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rgb_ycc_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[78]"></a>rgb_ycc_start</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, jccolor.o(i.rgb_ycc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rgb_ycc_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jccolor.o(i.jinit_color_converter)
</UL>
<P><STRONG><a name="[181]"></a>expand_right_edge</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, jcsample.o(i.expand_right_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expand_right_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_downsample
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_smooth_downsample
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v2_downsample
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2v1_downsample
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_smooth_downsample
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullsize_downsample
</UL>

<P><STRONG><a name="[82]"></a>fullsize_downsample</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, jcsample.o(i.fullsize_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fullsize_downsample &rArr; jcopy_sample_rows
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jcopy_sample_rows
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[81]"></a>fullsize_smooth_downsample</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, jcsample.o(i.fullsize_smooth_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fullsize_smooth_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[83]"></a>h2v1_downsample</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, jcsample.o(i.h2v1_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = h2v1_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[85]"></a>h2v2_downsample</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, jcsample.o(i.h2v2_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = h2v2_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[84]"></a>h2v2_smooth_downsample</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, jcsample.o(i.h2v2_smooth_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = h2v2_smooth_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[86]"></a>int_downsample</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, jcsample.o(i.int_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = int_downsample &rArr; expand_right_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_right_edge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[80]"></a>sep_downsample</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, jcsample.o(i.sep_downsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sep_downsample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[7f]"></a>start_pass_downsample</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jcsample.o(i.start_pass_downsample))
<BR>[Address Reference Count : 1]<UL><LI> jcsample.o(i.jinit_downsampler)
</UL>
<P><STRONG><a name="[ce]"></a>forward_DCT</STRONG> (Thumb, 140 bytes, Stack size 296 bytes, jcdctmgr.o(i.forward_DCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = forward_DCT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[cf]"></a>forward_DCT_float</STRONG> (Thumb, 134 bytes, Stack size 296 bytes, jcdctmgr.o(i.forward_DCT_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = forward_DCT_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.start_pass_fdctmgr)
</UL>
<P><STRONG><a name="[87]"></a>start_pass_fdctmgr</STRONG> (Thumb, 946 bytes, Stack size 64 bytes, jcdctmgr.o(i.start_pass_fdctmgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = start_pass_fdctmgr &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcdctmgr.o(i.jinit_forward_dct)
</UL>
<P><STRONG><a name="[15c]"></a>dump_buffer_e</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, jchuff.o(i.dump_buffer_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>

<P><STRONG><a name="[15e]"></a>dump_buffer_s</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, jchuff.o(i.dump_buffer_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>

<P><STRONG><a name="[158]"></a>emit_ac_symbol</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, jchuff.o(i.emit_ac_symbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_ac_symbol &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>

<P><STRONG><a name="[159]"></a>emit_bits_e</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, jchuff.o(i.emit_bits_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>

<P><STRONG><a name="[15d]"></a>emit_bits_s</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, jchuff.o(i.emit_bits_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_one_block
</UL>

<P><STRONG><a name="[15f]"></a>emit_buffered_bits</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jchuff.o(i.emit_buffered_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>

<P><STRONG><a name="[163]"></a>emit_eobrun</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, jchuff.o(i.emit_eobrun))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
</UL>

<P><STRONG><a name="[166]"></a>emit_restart_e</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, jchuff.o(i.emit_restart_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emit_restart_e &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_e
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
</UL>

<P><STRONG><a name="[168]"></a>emit_restart_s</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, jchuff.o(i.emit_restart_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emit_restart_s &rArr; flush_bits_s &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_buffer_s
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
</UL>

<P><STRONG><a name="[d3]"></a>encode_mcu_AC_first</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, jchuff.o(i.encode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = encode_mcu_AC_first &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d2]"></a>encode_mcu_AC_refine</STRONG> (Thumb, 380 bytes, Stack size 336 bytes, jchuff.o(i.encode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = encode_mcu_AC_refine &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_buffered_bits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ac_symbol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d4]"></a>encode_mcu_DC_first</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, jchuff.o(i.encode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = encode_mcu_DC_first &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d5]"></a>encode_mcu_DC_refine</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, jchuff.o(i.encode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_mcu_DC_refine &rArr; emit_restart_e &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d6]"></a>encode_mcu_gather</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, jchuff.o(i.encode_mcu_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = encode_mcu_gather &rArr; htest_one_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htest_one_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d7]"></a>encode_mcu_huff</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, jchuff.o(i.encode_mcu_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = encode_mcu_huff &rArr; encode_one_block &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_one_block
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[16f]"></a>encode_one_block</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, jchuff.o(i.encode_one_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = encode_one_block &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_huff
</UL>

<P><STRONG><a name="[d0]"></a>finish_pass_gather</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, jchuff.o(i.finish_pass_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216<LI>Call Chain = finish_pass_gather &rArr; jpeg_gen_optimal_table
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_alloc_huff_table
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_gen_optimal_table
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[d1]"></a>finish_pass_huff</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, jchuff.o(i.finish_pass_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = finish_pass_huff &rArr; emit_eobrun &rArr; emit_buffered_bits &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_s
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_bits_e
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_eobrun
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.start_pass_huff)
</UL>
<P><STRONG><a name="[167]"></a>flush_bits_e</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, jchuff.o(i.flush_bits_e))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flush_bits_e &rArr; emit_bits_e &rArr; dump_buffer_e
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_e
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_e
</UL>

<P><STRONG><a name="[169]"></a>flush_bits_s</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jchuff.o(i.flush_bits_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flush_bits_s &rArr; emit_bits_s &rArr; dump_buffer_s
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_bits_s
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_huff
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart_s
</UL>

<P><STRONG><a name="[16e]"></a>htest_one_block</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, jchuff.o(i.htest_one_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = htest_one_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_gather
</UL>

<P><STRONG><a name="[176]"></a>jpeg_gen_optimal_table</STRONG> (Thumb, 404 bytes, Stack size 2144 bytes, jchuff.o(i.jpeg_gen_optimal_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = jpeg_gen_optimal_table
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass_gather
</UL>

<P><STRONG><a name="[19d]"></a>jpeg_make_c_derived_tbl</STRONG> (Thumb, 332 bytes, Stack size 1368 bytes, jchuff.o(i.jpeg_make_c_derived_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = jpeg_make_c_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_pass_huff
</UL>

<P><STRONG><a name="[88]"></a>start_pass_huff</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, jchuff.o(i.start_pass_huff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = start_pass_huff &rArr; jpeg_make_c_derived_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_make_c_derived_tbl
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jchuff.o(i.jinit_huff_encoder)
</UL>
<P><STRONG><a name="[140]"></a>arith_encode</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, jcarith.o(i.arith_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arith_encode &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu
</UL>

<P><STRONG><a name="[141]"></a>emit_byte</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, jcarith.o(i.emit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>

<P><STRONG><a name="[165]"></a>emit_restart</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, jcarith.o(i.emit_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_pass
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_refine
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_DC_first
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_refine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu_AC_first
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_mcu
</UL>

<P><STRONG><a name="[a8]"></a>encode_mcu</STRONG> (Thumb, 678 bytes, Stack size 64 bytes, jcarith.o(i.encode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = encode_mcu &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a5]"></a>encode_mcu_AC_first</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, jcarith.o(i.encode_mcu_AC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = encode_mcu_AC_first &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a4]"></a>encode_mcu_AC_refine</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, jcarith.o(i.encode_mcu_AC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = encode_mcu_AC_refine &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a6]"></a>encode_mcu_DC_first</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, jcarith.o(i.encode_mcu_DC_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = encode_mcu_DC_first &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[a7]"></a>encode_mcu_DC_refine</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, jcarith.o(i.encode_mcu_DC_refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = encode_mcu_DC_refine &rArr; emit_restart &rArr; finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arith_encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.start_pass)
</UL>
<P><STRONG><a name="[6e]"></a>finish_pass</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, jcarith.o(i.finish_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_pass &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.jinit_arith_encoder)
</UL>
<P><STRONG><a name="[6d]"></a>start_pass</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, jcarith.o(i.start_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_pass
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcarith.o(i.jinit_arith_encoder)
</UL>
<P><STRONG><a name="[156]"></a>emit_2bytes</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, jcmarker.o(i.emit_2bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emit_2bytes &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_header
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>

<P><STRONG><a name="[15a]"></a>emit_adobe_app14</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, jcmarker.o(i.emit_adobe_app14))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emit_adobe_app14 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
</UL>

<P><STRONG><a name="[157]"></a>emit_byte</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, jcmarker.o(i.emit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_byte
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>

<P><STRONG><a name="[160]"></a>emit_dac</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, jcmarker.o(i.emit_dac))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emit_dac &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[161]"></a>emit_dht</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, jcmarker.o(i.emit_dht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_dht &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[162]"></a>emit_dqt</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, jcmarker.o(i.emit_dqt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
</UL>

<P><STRONG><a name="[164]"></a>emit_jfif_app0</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, jcmarker.o(i.emit_jfif_app0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emit_jfif_app0 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
</UL>

<P><STRONG><a name="[15b]"></a>emit_marker</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jcmarker.o(i.emit_marker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_tables_only
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_marker_header
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_trailer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_file_header
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>

<P><STRONG><a name="[16a]"></a>emit_sof</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, jcmarker.o(i.emit_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_sof &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_frame_header
</UL>

<P><STRONG><a name="[16b]"></a>emit_sos</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, jcmarker.o(i.emit_sos))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emit_sos &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scan_header
</UL>

<P><STRONG><a name="[89]"></a>write_file_header</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jcmarker.o(i.write_file_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_file_header &rArr; emit_jfif_app0 &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_jfif_app0
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_adobe_app14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8c]"></a>write_file_trailer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jcmarker.o(i.write_file_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_file_trailer &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8a]"></a>write_frame_header</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, jcmarker.o(i.write_frame_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_frame_header &rArr; emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sof
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8f]"></a>write_marker_byte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jcmarker.o(i.write_marker_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_marker_byte &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8e]"></a>write_marker_header</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, jcmarker.o(i.write_marker_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_marker_header &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8b]"></a>write_scan_header</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, jcmarker.o(i.write_scan_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_scan_header &rArr; emit_dac &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_sos
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dac
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_2bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[8d]"></a>write_tables_only</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jcmarker.o(i.write_tables_only))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_tables_only &rArr; emit_dqt &rArr; emit_marker &rArr; emit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_marker
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dqt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_dht
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jcmarker.o(i.jinit_marker_writer)
</UL>
<P><STRONG><a name="[9c]"></a>empty_mem_output_buffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, jdatadst.o(i.empty_mem_output_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = empty_mem_output_buffer &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_mem_dest)
</UL>
<P><STRONG><a name="[9b]"></a>init_mem_destination</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jdatadst.o(i.init_mem_destination))
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_mem_dest)
</UL>
<P><STRONG><a name="[9d]"></a>term_mem_destination</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, jdatadst.o(i.term_mem_destination))
<BR>[Address Reference Count : 1]<UL><LI> jdatadst.o(i.jpeg_mem_dest)
</UL>
<P><STRONG><a name="[9f]"></a>emit_message</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, jerror.o(i.emit_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = emit_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[9e]"></a>error_exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, jerror.o(i.error_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = error_exit &rArr; jpeg_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a1]"></a>format_message</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, jerror.o(i.format_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = format_message &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a0]"></a>output_message</STRONG> (Thumb, 16 bytes, Stack size 208 bytes, jerror.o(i.output_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = output_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[a2]"></a>reset_error_mgr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jerror.o(i.reset_error_mgr))
<BR>[Address Reference Count : 1]<UL><LI> jerror.o(i.jpeg_std_error)
</UL>
<P><STRONG><a name="[98]"></a>access_virt_barray</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, jmemmgr.o(i.access_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = access_virt_barray &rArr; do_barray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_barray_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[97]"></a>access_virt_sarray</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, jmemmgr.o(i.access_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = access_virt_sarray &rArr; do_sarray_io
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sarray_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[93]"></a>alloc_barray</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = alloc_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[91]"></a>alloc_large</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = alloc_large &rArr; jpeg_get_large &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_large
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[92]"></a>alloc_sarray</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realize_virt_arrays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[90]"></a>alloc_small</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, jmemmgr.o(i.alloc_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_get_small
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_sarray
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_virt_barray
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[139]"></a>do_barray_io</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, jmemmgr.o(i.do_barray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_barray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_barray
</UL>

<P><STRONG><a name="[13a]"></a>do_sarray_io</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, jmemmgr.o(i.do_sarray_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = do_sarray_io
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_virt_sarray
</UL>

<P><STRONG><a name="[99]"></a>free_pool</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, jmemmgr.o(i.free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = free_pool &rArr; jpeg_free_small &rArr; vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_large
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_destruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[13d]"></a>out_of_memory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jmemmgr.o(i.out_of_memory))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_large
</UL>

<P><STRONG><a name="[96]"></a>realize_virt_arrays</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, jmemmgr.o(i.realize_virt_arrays))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = realize_virt_arrays &rArr; alloc_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_open_backing_store
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_available
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_sarray
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_barray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[95]"></a>request_virt_barray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_barray))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = request_virt_barray &rArr; alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[94]"></a>request_virt_sarray</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, jmemmgr.o(i.request_virt_sarray))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = request_virt_sarray &rArr; alloc_small &rArr; jpeg_get_small &rArr; pvPortMalloc &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[9a]"></a>self_destruct</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jmemmgr.o(i.self_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = self_destruct &rArr; free_pool &rArr; jpeg_free_small &rArr; vPortFree &rArr; prvInsertBlockIntoFreeList
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mem_term
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_free_small
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_pool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jmemmgr.o(i.jinit_memory_mgr)
</UL>
<P><STRONG><a name="[130]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[138]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[137]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
